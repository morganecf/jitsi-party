import PropTypes from 'prop-types';
import { useEffect } from 'react';
import useLatest from 'use-latest';

var useBeforeunload = function useBeforeunload(handler) {
  if (process.env.NODE_ENV !== 'production') {
    if (typeof handler !== 'function' && handler != null) {
      throw new TypeError("Expected `handler` to be of type `function`, but received type `" + typeof handler + "`");
    }
  }

  var handlerRef = useLatest(handler);
  useEffect(function () {
    var handleBeforeunload = function handleBeforeunload(event) {
      var returnValue;

      if (handlerRef.current != null) {
        returnValue = handlerRef.current(event);
      } // Chrome requires `returnValue` to be set.


      if (event.defaultPrevented) {
        event.returnValue = '';
      }

      if (typeof returnValue === 'string') {
        event.returnValue = returnValue;
        return returnValue;
      }
    };

    window.addEventListener('beforeunload', handleBeforeunload);
    return function () {
      window.removeEventListener('beforeunload', handleBeforeunload);
    };
  }, []); // eslint-disable-line react-hooks/exhaustive-deps
};

var Beforeunload = function Beforeunload(_ref) {
  var _ref$children = _ref.children,
      children = _ref$children === void 0 ? null : _ref$children,
      onBeforeunload = _ref.onBeforeunload;
  useBeforeunload(onBeforeunload);
  return children;
};

if (process.env.NODE_ENV !== 'production') {
  Beforeunload.propTypes = {
    children: PropTypes.any,
    onBeforeunload: PropTypes.func.isRequired
  };
}

export { Beforeunload, useBeforeunload };
//# sourceMappingURL=index.esm.js.map
