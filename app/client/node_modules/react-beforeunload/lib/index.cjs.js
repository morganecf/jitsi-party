'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var PropTypes = require('prop-types');
var react = require('react');
var useLatest = require('use-latest');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var PropTypes__default = /*#__PURE__*/_interopDefaultLegacy(PropTypes);
var useLatest__default = /*#__PURE__*/_interopDefaultLegacy(useLatest);

var useBeforeunload = function useBeforeunload(handler) {
  if (process.env.NODE_ENV !== 'production') {
    if (typeof handler !== 'function' && handler != null) {
      throw new TypeError("Expected `handler` to be of type `function`, but received type `" + typeof handler + "`");
    }
  }

  var handlerRef = useLatest__default['default'](handler);
  react.useEffect(function () {
    var handleBeforeunload = function handleBeforeunload(event) {
      var returnValue;

      if (handlerRef.current != null) {
        returnValue = handlerRef.current(event);
      } // Chrome requires `returnValue` to be set.


      if (event.defaultPrevented) {
        event.returnValue = '';
      }

      if (typeof returnValue === 'string') {
        event.returnValue = returnValue;
        return returnValue;
      }
    };

    window.addEventListener('beforeunload', handleBeforeunload);
    return function () {
      window.removeEventListener('beforeunload', handleBeforeunload);
    };
  }, []); // eslint-disable-line react-hooks/exhaustive-deps
};

var Beforeunload = function Beforeunload(_ref) {
  var _ref$children = _ref.children,
      children = _ref$children === void 0 ? null : _ref$children,
      onBeforeunload = _ref.onBeforeunload;
  useBeforeunload(onBeforeunload);
  return children;
};

if (process.env.NODE_ENV !== 'production') {
  Beforeunload.propTypes = {
    children: PropTypes__default['default'].any,
    onBeforeunload: PropTypes__default['default'].func.isRequired
  };
}

exports.Beforeunload = Beforeunload;
exports.useBeforeunload = useBeforeunload;
//# sourceMappingURL=index.cjs.js.map
