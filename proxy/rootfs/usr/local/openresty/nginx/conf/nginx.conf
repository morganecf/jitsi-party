worker_processes  auto;
error_log  stderr notice;

events {
    worker_connections  1024;
}

env PROXY_AUTH_ENABLED;
env PROXY_AUTH_DISCOVERY;
env PROXY_AUTH_CLIENT_ID;
env PROXY_AUTH_CLIENT_SECRET;
env PROXY_AUTH_ALLOWED_GROUPS;

http {
    include       mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  stdout main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    gzip  on;

    resolver 127.0.0.11 ipv6=off valid=30s;

     upstream jitsi-party {
        ip_hash;
        server web-worker_1:80;
        server web-worker_2:80;
    }

    server {
        listen 80 default_server;
        listen [::]:80 default_server;
        server_name _;
        return 301 https://$host$request_uri;
    }

    lua_ssl_trusted_certificate /etc/ssl/certs/ca-certificates.crt;
    lua_shared_dict discovery 1m;
    lua_shared_dict jwks 1m;



    server {
        listen 443 ssl;
        listen [::]:443 ssl;
        include ssl.conf;

        server_name ~.*;

        client_max_body_size 0;

        access_by_lua_block {
            if os.getenv("PROXY_AUTH_ENABLED") == nil then
                return
            end

            local opts = {
              discovery = os.getenv("PROXY_AUTH_DISCOVERY"),
              redirect_uri = "https://" .. ngx.var.http_host .. "/login",
              client_id = os.getenv("PROXY_AUTH_CLIENT_ID"),
              client_secret = os.getenv("PROXY_AUTH_CLIENT_SECRET"),
              redirect_uri_scheme = "https",
            }

            local res, err = require("resty.openidc").authenticate(opts)

            if err then
              ngx.log(ngx.ERR, err)
              ngx.exit(ngx.HTTP_INTERNAL_SERVER_ERROR)
            end

            local user_groups = res.id_token["cognito:groups"]
            local allowed_groups = {}
            local matches = string.gmatch(os.getenv("PROXY_AUTH_ALLOWED_GROUPS"), "%w+")
            if matches ~= nil then
              for group in matches do
                table.insert(allowed_groups, group)
              end
            end

            local function allowed (user_groups, allowed_groups)
              if user_groups ~= nil then
                for _, user_group in pairs(user_groups) do
                  for _, allowed_group in pairs(allowed_groups) do
                    if user_group == allowed_group then
                      return true
                    end
                  end
                end
              end

              return false
            end

            if not allowed(user_groups, allowed_groups) then
              ngx.exit(ngx.HTTP_FORBIDDEN)
            end

        }

        location / {
            include proxy.conf;
            proxy_pass http://jitsi-party;

            proxy_set_header Range $http_range;
            proxy_set_header If-Range $http_if_range;
        }

        location /socket.io {
            include proxy.conf;

            proxy_buffering off;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "Upgrade";
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

            proxy_pass http://jitsi-party/socket.io;
        }

        location ~ ^/jitsi/(.*)$ {
            include proxy.conf;
            proxy_pass http://jitsi-meet:80/$1;

            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $http_connection;

            proxy_set_header Range $http_range;
            proxy_set_header If-Range $http_if_range;
        }

        location /login {
            include proxy.conf;
            proxy_pass http://jitsi-party;

            proxy_set_header Range $http_range;
            proxy_set_header If-Range $http_if_range;
        }
    }
}
